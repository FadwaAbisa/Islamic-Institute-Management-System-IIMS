generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id                      String            @id @default(uuid())
  fullName                String
  nationalId              String            @unique
  guardianName            String?
  studentPhone            String?
  birthday                DateTime
  placeOfBirth            String
  address                 String
  nationality             String
  academicYear            String?
  studyLevel              StudyLevel?
  specialization          String?
  studyMode               StudyMode?
  enrollmentStatus        EnrollmentStatus?
  studentStatus           StudentStatus?
  relationship            String?
  guardianPhone           String?
  previousSchool          String?
  previousLevel           String?
  healthCondition         String?
  chronicDiseases         String?
  allergies               String?
  specialNeeds            String?
  emergencyContactName    String?
  emergencyContactPhone   String?
  emergencyContactAddress String?
  notes                   String?
  studentPhoto            String?
  nationalIdCopy          String?
  birthCertificate        String?
  educationForm           String?
  equivalencyDocument     String?
  otherDocuments          Json?
  createdAt               DateTime          @default(now())
  attendances             Attendance[]
  subjectGrades           SubjectGrade[]
}

model Teacher {
  id                       String            @id @default(uuid())
  fullName                 String
  nationalId               String            @unique
  birthday                 DateTime
  nationality              String?
  address                  String?
  createdAt                DateTime          @default(now())
  academicQualification    String?
  appointmentDate          DateTime?
  contractEndDate          DateTime?
  educationalInstitution   String?
  emergencyContactName     String?
  emergencyContactRelation String?
  employmentStatus         EmploymentStatus?
  graduationYear           String?
  majorSpecialization      String?
  maritalStatus            MaritalStatus?
  minorSpecialization      String?
  phone1                   String
  phone2                   String?
  serviceStartDate         DateTime?
  TeacherSubject           TeacherSubject[]
}

model Subject {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  academicYear   String?
  subjectGrades  SubjectGrade[]
  TeacherSubject TeacherSubject[]
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  lessonId  Int
  student   Student  @relation(fields: [studentId], references: [id])
}

model SubjectGrade {
  id           Int              @id @default(autoincrement())
  academicYear String
  period       EvaluationPeriod
  month1       Int?
  month2       Int?
  month3       Int?
  workTotal    Float            @default(0)
  finalExam    Int?
  periodTotal  Float            @default(0)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  studentId    String
  subjectId    Int
  student      Student          @relation(fields: [studentId], references: [id])
  subject      Subject          @relation(fields: [subjectId], references: [id])

  @@unique([studentId, subjectId, academicYear, period])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
}

model TeacherSubject {
  id        Int      @id @default(autoincrement())
  teacherId String
  subjectId Int
  createdAt DateTime @default(now())
  Subject   Subject  @relation(fields: [subjectId], references: [id])
  Teacher   Teacher  @relation(fields: [teacherId], references: [id])

  @@unique([teacherId, subjectId])
}

enum StudyLevel {
  FIRST_YEAR
  SECOND_YEAR
  THIRD_YEAR
  GRADUATION
}

enum StudyMode {
  REGULAR
  DISTANCE
}

enum EnrollmentStatus {
  NEW
  REPEATER
}

enum StudentStatus {
  ACTIVE
  DROPPED
  SUSPENDED
  EXPELLED
  PAUSED
  GRADUATED
}

enum EmploymentStatus {
  APPOINTMENT
  CONTRACT
  SECONDMENT
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum EvaluationPeriod {
  FIRST
  SECOND
  THIRD
}
