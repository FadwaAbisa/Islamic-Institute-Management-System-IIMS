import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import * as XLSX from 'xlsx';
import { getGradeDistribution, calculateFinalResult } from "@/lib/grade-distributions";

const prisma = new PrismaClient();

export async function GET(request: NextRequest) {
    try {
        const url = new URL(request.url);
        const academicYear = url.searchParams.get("academicYear");
        const educationLevel = url.searchParams.get("educationLevel");
        const studySystem = url.searchParams.get("studySystem");
        const exportMode = url.searchParams.get("exportMode") || "all";
        const studentIds = url.searchParams.get("studentIds");

        console.log("๐ ุชุตุฏูุฑ ุงููุชุงุฆุฌ:", { academicYear, educationLevel, studySystem, exportMode });

        if (!academicYear || !educationLevel || !studySystem) {
            return NextResponse.json({ error: "ุงููุนุงููุฑ ุงูุฃุณุงุณูุฉ ูุทููุจุฉ" }, { status: 400 });
        }

        // ุชุญููู ุงููุฑุญูุฉ ุงูุชุนููููุฉ
        let studyLevelEnum: "FIRST_YEAR" | "SECOND_YEAR" | "THIRD_YEAR" | "GRADUATION";
        switch (educationLevel) {
            case "ุงูุณูุฉ ุงูุฃููู":
                studyLevelEnum = "FIRST_YEAR";
                break;
            case "ุงูุณูุฉ ุงูุซุงููุฉ":
                studyLevelEnum = "SECOND_YEAR";
                break;
            case "ุงูุณูุฉ ุงูุซุงูุซุฉ":
                studyLevelEnum = "THIRD_YEAR";
                break;
            case "ุงูุชุฎุฑุฌ":
                studyLevelEnum = "GRADUATION";
                break;
            default:
                return NextResponse.json({ error: "ูุฑุญูุฉ ุชุนููููุฉ ุบูุฑ ุตุญูุญุฉ" }, { status: 400 });
        }

        // ุชุญููู ูุธุงู ุงูุฏุฑุงุณุฉ
        let studyModeEnum: "REGULAR" | "CORRESPONDENCE";
        switch (studySystem) {
            case "ูุธุงูู":
                studyModeEnum = "REGULAR";
                break;
            case "ุงูุชุณุงุจ":
                studyModeEnum = "CORRESPONDENCE";
                break;
            default:
                return NextResponse.json({ error: "ูุธุงู ุฏุฑุงุณุฉ ุบูุฑ ุตุญูุญ" }, { status: 400 });
        }

        // ุฅุนุฏุงุฏ ุดุฑูุท ุงูุจุญุซ
        const whereConditions: any = {
            academicYear: academicYear,
            studyLevel: studyLevelEnum,
            studyMode: studyModeEnum
        };

        // ุฅุถุงูุฉ ููุชุฑุฉ ุญุณุจ ูุนุฑูุงุช ุงูุทูุงุจ ุฅุฐุง ููุฌุฏุช
        if (studentIds) {
            whereConditions.id = {
                in: studentIds.split(',')
            };
        }

        // ุงูุจุญุซ ุนู ุงูุทูุงุจ ูุน ุฌููุน ุฏุฑุฌุงุชูู
        const students = await prisma.student.findMany({
            where: whereConditions,
            include: {
                SubjectGrade: {
                    where: {
                        academicYear: academicYear
                    },
                    include: {
                        Subject: true
                    }
                }
            },
            orderBy: [
                { studentNumber: 'asc' },
                { fullName: 'asc' }
            ]
        });

        // ุฅุนุฏุงุฏ ุงูููุงุฏ (ููุฃุนูุฏุฉ)
        const allSubjects = [
            "ุงูููุฑุขู ูุฃุญูุงูู", "ุงูุณูุฑุฉ", "ุงูุชูุณูุฑ", "ุนููู ุงูุญุฏูุซ",
            "ุงูููุฉ", "ุงูุนููุฏุฉ", "ุงูุฏุฑุงุณุงุช ุงูุฃุฏุจูุฉ", "ุงูุฏุฑุงุณุงุช ุงููุบููุฉ",
            "ุฃุตูู ุงูููู", "ูููุฌ ุงูุฏุนูุฉ", "ุงููุบุฉ ุงูุฅูุฌููุฒูุฉ", "ุงูุญุงุณูุจ"
        ];

        // ุฅุนุฏุงุฏ ุงูุจูุงูุงุช ููุชุตุฏูุฑ
        const exportData: any[] = [];

        students.forEach(student => {
            const subjects: { [key: string]: any } = {};

            // ุชุฌููุน ุงูุฏุฑุฌุงุช ุญุณุจ ุงููุงุฏุฉ ูุงููุชุฑุฉ
            student.SubjectGrade.forEach(grade => {
                const subjectName = grade.Subject.name;
                if (!subjects[subjectName]) {
                    subjects[subjectName] = {};
                }

                let periodName = "";
                switch (grade.period) {
                    case "FIRST":
                        periodName = "first";
                        break;
                    case "SECOND":
                        periodName = "second";
                        break;
                    case "THIRD":
                        periodName = "third";
                        break;
                }

                subjects[subjectName][periodName] = {
                    month1: grade.month1,
                    month2: grade.month2,
                    month3: grade.month3,
                    periodExam: grade.finalExam,
                    workTotal: grade.workTotal,
                    periodTotal: grade.periodTotal
                };
            });

            // ุญุณุงุจ ุงููุชุงุฆุฌ ุงูููุงุฆูุฉ
            let totalScore = 0;
            let completedSubjects = 0;
            let passedSubjects = 0;
            const subjectResults: { [key: string]: any } = {};

            allSubjects.forEach(subjectName => {
                const subjectGrades = subjects[subjectName];
                const distribution = getGradeDistribution(subjectName, educationLevel);

                if (distribution && subjectGrades?.first && subjectGrades?.second && subjectGrades?.third) {
                    const result = calculateFinalResult(
                        subjectGrades.first.periodTotal || 0,
                        subjectGrades.second.periodTotal || 0,
                        subjectGrades.third.periodExam || 0,
                        distribution
                    );

                    subjectResults[subjectName] = result;
                    totalScore += result.finalTotal;
                    completedSubjects++;
                    if (result.status === 'ูุฌุญ') passedSubjects++;
                }
            });

            // ุญุณุงุจ ุงููุชูุฌุฉ ุงูุนุงูุฉ
            const averageScore = completedSubjects > 0 ? totalScore / completedSubjects : 0;
            const percentage = (averageScore / 100) * 100;

            let status = 'ุบูุฑ ููุชูู';
            let letterGrade = '';
            let gpa = 0;

            if (completedSubjects > 0) {
                status = passedSubjects === completedSubjects ? 'ูุฌุญ' : 'ุฑุงุณุจ';

                if (percentage >= 90) {
                    letterGrade = 'ููุชุงุฒ';
                    gpa = 4.0;
                } else if (percentage >= 80) {
                    letterGrade = 'ุฌูุฏ ุฌุฏุงู';
                    gpa = 3.5;
                } else if (percentage >= 70) {
                    letterGrade = 'ุฌูุฏ';
                    gpa = 3.0;
                } else if (percentage >= 60) {
                    letterGrade = 'ููุจูู';
                    gpa = 2.5;
                } else if (percentage >= 50) {
                    letterGrade = 'ุถุนูู';
                    gpa = 2.0;
                } else {
                    letterGrade = 'ุฑุงุณุจ';
                    gpa = 1.0;
                }
            }

            // ููุชุฑุฉ ุญุณุจ ููุน ุงูุชุตุฏูุฑ
            let includeStudent = true;
            if (exportMode === 'passed' && status !== 'ูุฌุญ') includeStudent = false;
            if (exportMode === 'failed' && status !== 'ุฑุงุณุจ') includeStudent = false;

            if (includeStudent) {
                const row: any = {
                    'ุฑูู ุงูุทุงูุจ': student.studentNumber,
                    'ุงุณู ุงูุทุงูุจ': student.fullName,
                    'ุงูุนุงู ุงูุฏุฑุงุณู': student.academicYear,
                    'ุงููุฑุญูุฉ ุงูุชุนููููุฉ': educationLevel,
                    'ูุธุงู ุงูุฏุฑุงุณุฉ': studySystem,
                    'ุงูุชุฎุตุต': student.specialization || "ุบูุฑ ูุญุฏุฏ",
                    'ููุน ุงูุทุงูุจ': student.isDiploma ? "ุฏุจููู" : "ุนุงุฏู"
                };

                // ุฅุถุงูุฉ ุฏุฑุฌุงุช ุงูููุงุฏ
                allSubjects.forEach(subjectName => {
                    const result = subjectResults[subjectName];
                    if (result) {
                        row[`${subjectName} - ุงูุฏุฑุฌุฉ ุงูููุงุฆูุฉ`] = result.finalTotal;
                        row[`${subjectName} - ุงูุชูุฏูุฑ`] = result.grade;
                        row[`${subjectName} - ุงูุญุงูุฉ`] = result.status;
                    } else {
                        row[`${subjectName} - ุงูุฏุฑุฌุฉ ุงูููุงุฆูุฉ`] = "ุบูุฑ ููุชูู";
                        row[`${subjectName} - ุงูุชูุฏูุฑ`] = "-";
                        row[`${subjectName} - ุงูุญุงูุฉ`] = "ุบูุฑ ููุชูู";
                    }
                });

                // ุฅุถุงูุฉ ุงููุชูุฌุฉ ุงูุนุงูุฉ
                row['ุงููุฌููุน ุงูููู'] = Math.round(totalScore * 10) / 10;
                row['ุงููุชูุณุท ุงูุนุงู'] = Math.round(averageScore * 10) / 10;
                row['ุงููุณุจุฉ ุงููุฆููุฉ'] = Math.round(percentage * 10) / 10 + '%';
                row['ุงูุชูุฏูุฑ ุงูุนุงู'] = letterGrade;
                row['ุงููุนุฏู ุงูุชุฑุงููู'] = gpa;
                row['ุงูุญุงูุฉ ุงูููุงุฆูุฉ'] = status;
                row['ุนุฏุฏ ุงูููุงุฏ ุงูููุชููุฉ'] = completedSubjects;
                row['ุนุฏุฏ ุงูููุงุฏ ุงููุงุฌุญ ุจูุง'] = passedSubjects;

                exportData.push(row);
            }
        });

        // ุฅูุดุงุก ููู Excel
        const workbook = XLSX.utils.book_new();

        // ูุฑูุฉ ุงููุชุงุฆุฌ ุงูุฑุฆูุณูุฉ
        const worksheet = XLSX.utils.json_to_sheet(exportData);

        // ุชุญุณูู ุนุฑุถ ุงูุฃุนูุฏุฉ
        const columnWidths = [
            { wch: 12 }, // ุฑูู ุงูุทุงูุจ
            { wch: 25 }, // ุงุณู ุงูุทุงูุจ
            { wch: 15 }, // ุงูุนุงู ุงูุฏุฑุงุณู
            { wch: 15 }, // ุงููุฑุญูุฉ ุงูุชุนููููุฉ
            { wch: 12 }, // ูุธุงู ุงูุฏุฑุงุณุฉ
            { wch: 15 }, // ุงูุชุฎุตุต
            { wch: 12 }, // ููุน ุงูุทุงูุจ
        ];

        // ุฅุถุงูุฉ ุนุฑุถ ุฃุนูุฏุฉ ุงูููุงุฏ
        allSubjects.forEach(() => {
            columnWidths.push({ wch: 12 }); // ุงูุฏุฑุฌุฉ ุงูููุงุฆูุฉ
            columnWidths.push({ wch: 12 }); // ุงูุชูุฏูุฑ
            columnWidths.push({ wch: 12 }); // ุงูุญุงูุฉ
        });

        // ุฅุถุงูุฉ ุนุฑุถ ุฃุนูุฏุฉ ุงููุชูุฌุฉ ุงูุนุงูุฉ
        columnWidths.push(
            { wch: 15 }, // ุงููุฌููุน ุงูููู
            { wch: 15 }, // ุงููุชูุณุท ุงูุนุงู
            { wch: 15 }, // ุงููุณุจุฉ ุงููุฆููุฉ
            { wch: 15 }, // ุงูุชูุฏูุฑ ุงูุนุงู
            { wch: 15 }, // ุงููุนุฏู ุงูุชุฑุงููู
            { wch: 15 }, // ุงูุญุงูุฉ ุงูููุงุฆูุฉ
            { wch: 18 }, // ุนุฏุฏ ุงูููุงุฏ ุงูููุชููุฉ
            { wch: 18 }  // ุนุฏุฏ ุงูููุงุฏ ุงููุงุฌุญ ุจูุง
        );

        worksheet['!cols'] = columnWidths;

        XLSX.utils.book_append_sheet(workbook, worksheet, "ุงููุชุงุฆุฌ ุงูููุงุฆูุฉ");

        // ุฅุถุงูุฉ ูุฑูุฉ ุงูุฅุญุตุงุฆูุงุช
        const stats = {
            'ุฅุฌูุงูู ุงูุทูุงุจ': exportData.length,
            'ุงููุงุฌุญูู': exportData.filter(s => s['ุงูุญุงูุฉ ุงูููุงุฆูุฉ'] === 'ูุฌุญ').length,
            'ุงูุฑุงุณุจูู': exportData.filter(s => s['ุงูุญุงูุฉ ุงูููุงุฆูุฉ'] === 'ุฑุงุณุจ').length,
            'ุบูุฑ ููุชูู': exportData.filter(s => s['ุงูุญุงูุฉ ุงูููุงุฆูุฉ'] === 'ุบูุฑ ููุชูู').length,
            'ุงููุชูุณุท ุงูุนุงู': exportData.length > 0 ?
                Math.round(exportData.reduce((sum, s) => sum + parseFloat(s['ุงููุชูุณุท ุงูุนุงู'] || 0), 0) / exportData.length * 10) / 10 : 0
        };

        const gradeDistribution = {
            'ููุชุงุฒ': exportData.filter(s => s['ุงูุชูุฏูุฑ ุงูุนุงู'] === 'ููุชุงุฒ').length,
            'ุฌูุฏ ุฌุฏุงู': exportData.filter(s => s['ุงูุชูุฏูุฑ ุงูุนุงู'] === 'ุฌูุฏ ุฌุฏุงู').length,
            'ุฌูุฏ': exportData.filter(s => s['ุงูุชูุฏูุฑ ุงูุนุงู'] === 'ุฌูุฏ').length,
            'ููุจูู': exportData.filter(s => s['ุงูุชูุฏูุฑ ุงูุนุงู'] === 'ููุจูู').length,
            'ุถุนูู': exportData.filter(s => s['ุงูุชูุฏูุฑ ุงูุนุงู'] === 'ุถุนูู').length,
            'ุฑุงุณุจ': exportData.filter(s => s['ุงูุชูุฏูุฑ ุงูุนุงู'] === 'ุฑุงุณุจ').length
        };

        const statsData = [
            { 'ุงูุฅุญุตุงุฆูุฉ': 'ูุนูููุงุช ุนุงูุฉ', 'ุงููููุฉ': '' },
            ...Object.entries(stats).map(([key, value]) => ({ 'ุงูุฅุญุตุงุฆูุฉ': key, 'ุงููููุฉ': value })),
            { 'ุงูุฅุญุตุงุฆูุฉ': '', 'ุงููููุฉ': '' },
            { 'ุงูุฅุญุตุงุฆูุฉ': 'ุชูุฒูุน ุงูุชูุฏูุฑุงุช', 'ุงููููุฉ': '' },
            ...Object.entries(gradeDistribution).map(([key, value]) => ({ 'ุงูุฅุญุตุงุฆูุฉ': key, 'ุงููููุฉ': value }))
        ];

        const statsWorksheet = XLSX.utils.json_to_sheet(statsData);
        statsWorksheet['!cols'] = [{ wch: 20 }, { wch: 15 }];
        XLSX.utils.book_append_sheet(workbook, statsWorksheet, "ุงูุฅุญุตุงุฆูุงุช");

        // ุชุญููู ุฅูู buffer
        const buffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });

        // ุฅุนุฏุงุฏ ุงุณู ุงูููู
        const fileName = `ุงููุชุงุฆุฌ_ุงูููุงุฆูุฉ_${academicYear}_${educationLevel}_${studySystem}_${exportMode}.xlsx`;

        console.log(`โ ุชู ุชุตุฏูุฑ ${exportData.length} ูุชูุฌุฉ ุฅูู ${fileName}`);

        // ุฅุฑุณุงู ุงูููู
        return new NextResponse(buffer, {
            status: 200,
            headers: {
                'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'Content-Disposition': `attachment; filename="${encodeURIComponent(fileName)}"`,
                'Content-Length': buffer.length.toString()
            }
        });

    } catch (error) {
        console.error("โ ุฎุทุฃ ูู ุชุตุฏูุฑ ุงููุชุงุฆุฌ:", error);
        return NextResponse.json({
            success: false,
            error: "ุญุฏุซ ุฎุทุฃ ูู ุชุตุฏูุฑ ุงููุชุงุฆุฌ",
            details: error instanceof Error ? error.message : "ุฎุทุฃ ุบูุฑ ูุนุฑูู"
        }, { status: 500 });
    } finally {
        await prisma.$disconnect();
    }
}
